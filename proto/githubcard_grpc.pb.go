// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GithubClient is the client API for Github service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubClient interface {
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	AddIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
	Get(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Silence(ctx context.Context, in *SilenceRequest, opts ...grpc.CallOption) (*SilenceResponse, error)
	RegisterJob(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeleteIssue(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreatePullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error)
	GetPullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error)
	ClosePullRequest(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	AddMilestone(ctx context.Context, in *AddMilestoneRequest, opts ...grpc.CallOption) (*AddMilestoneResponse, error)
	UpdateMilestone(ctx context.Context, in *UpdateMilestoneRequest, opts ...grpc.CallOption) (*UpdateMilestoneResponse, error)
}

type githubClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubClient(cc grpc.ClientConnInterface) GithubClient {
	return &githubClient{cc}
}

func (c *githubClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) AddIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/githubcard.Github/AddIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) Get(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/githubcard.Github/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) Silence(ctx context.Context, in *SilenceRequest, opts ...grpc.CallOption) (*SilenceResponse, error) {
	out := new(SilenceResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/Silence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) RegisterJob(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/RegisterJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) DeleteIssue(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/DeleteIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) CreatePullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error) {
	out := new(PullResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/CreatePullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) GetPullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error) {
	out := new(PullResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/GetPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) ClosePullRequest(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/ClosePullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) AddMilestone(ctx context.Context, in *AddMilestoneRequest, opts ...grpc.CallOption) (*AddMilestoneResponse, error) {
	out := new(AddMilestoneResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/AddMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) UpdateMilestone(ctx context.Context, in *UpdateMilestoneRequest, opts ...grpc.CallOption) (*UpdateMilestoneResponse, error) {
	out := new(UpdateMilestoneResponse)
	err := c.cc.Invoke(ctx, "/githubcard.Github/UpdateMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubServer is the server API for Github service.
// All implementations should embed UnimplementedGithubServer
// for forward compatibility
type GithubServer interface {
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	AddIssue(context.Context, *Issue) (*Issue, error)
	Get(context.Context, *Issue) (*Issue, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Silence(context.Context, *SilenceRequest) (*SilenceResponse, error)
	RegisterJob(context.Context, *RegisterRequest) (*RegisterResponse, error)
	DeleteIssue(context.Context, *DeleteRequest) (*DeleteResponse, error)
	CreatePullRequest(context.Context, *PullRequest) (*PullResponse, error)
	GetPullRequest(context.Context, *PullRequest) (*PullResponse, error)
	ClosePullRequest(context.Context, *CloseRequest) (*CloseResponse, error)
	AddMilestone(context.Context, *AddMilestoneRequest) (*AddMilestoneResponse, error)
	UpdateMilestone(context.Context, *UpdateMilestoneRequest) (*UpdateMilestoneResponse, error)
}

// UnimplementedGithubServer should be embedded to have forward compatible implementations.
type UnimplementedGithubServer struct {
}

func (UnimplementedGithubServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedGithubServer) AddIssue(context.Context, *Issue) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIssue not implemented")
}
func (UnimplementedGithubServer) Get(context.Context, *Issue) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGithubServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGithubServer) Silence(context.Context, *SilenceRequest) (*SilenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Silence not implemented")
}
func (UnimplementedGithubServer) RegisterJob(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJob not implemented")
}
func (UnimplementedGithubServer) DeleteIssue(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssue not implemented")
}
func (UnimplementedGithubServer) CreatePullRequest(context.Context, *PullRequest) (*PullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePullRequest not implemented")
}
func (UnimplementedGithubServer) GetPullRequest(context.Context, *PullRequest) (*PullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPullRequest not implemented")
}
func (UnimplementedGithubServer) ClosePullRequest(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePullRequest not implemented")
}
func (UnimplementedGithubServer) AddMilestone(context.Context, *AddMilestoneRequest) (*AddMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMilestone not implemented")
}
func (UnimplementedGithubServer) UpdateMilestone(context.Context, *UpdateMilestoneRequest) (*UpdateMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMilestone not implemented")
}

// UnsafeGithubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubServer will
// result in compilation errors.
type UnsafeGithubServer interface {
	mustEmbedUnimplementedGithubServer()
}

func RegisterGithubServer(s grpc.ServiceRegistrar, srv GithubServer) {
	s.RegisterService(&_Github_serviceDesc, srv)
}

func _Github_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_AddIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).AddIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/AddIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).AddIssue(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).Get(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_Silence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SilenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).Silence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/Silence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).Silence(ctx, req.(*SilenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_RegisterJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).RegisterJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/RegisterJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).RegisterJob(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_DeleteIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).DeleteIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/DeleteIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).DeleteIssue(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_CreatePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).CreatePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/CreatePullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).CreatePullRequest(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_GetPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).GetPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/GetPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).GetPullRequest(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_ClosePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).ClosePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/ClosePullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).ClosePullRequest(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_AddMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).AddMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/AddMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).AddMilestone(ctx, req.(*AddMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_UpdateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).UpdateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/UpdateMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).UpdateMilestone(ctx, req.(*UpdateMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Github_serviceDesc = grpc.ServiceDesc{
	ServiceName: "githubcard.Github",
	HandlerType: (*GithubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _Github_Configure_Handler,
		},
		{
			MethodName: "AddIssue",
			Handler:    _Github_AddIssue_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Github_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Github_GetAll_Handler,
		},
		{
			MethodName: "Silence",
			Handler:    _Github_Silence_Handler,
		},
		{
			MethodName: "RegisterJob",
			Handler:    _Github_RegisterJob_Handler,
		},
		{
			MethodName: "DeleteIssue",
			Handler:    _Github_DeleteIssue_Handler,
		},
		{
			MethodName: "CreatePullRequest",
			Handler:    _Github_CreatePullRequest_Handler,
		},
		{
			MethodName: "GetPullRequest",
			Handler:    _Github_GetPullRequest_Handler,
		},
		{
			MethodName: "ClosePullRequest",
			Handler:    _Github_ClosePullRequest_Handler,
		},
		{
			MethodName: "AddMilestone",
			Handler:    _Github_AddMilestone_Handler,
		},
		{
			MethodName: "UpdateMilestone",
			Handler:    _Github_UpdateMilestone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "githubcard.proto",
}
