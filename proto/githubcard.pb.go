// Code generated by protoc-gen-go. DO NOT EDIT.
// source: githubcard.proto

/*
Package githubcard is a generated protocol buffer package.

It is generated from these files:
	githubcard.proto

It has these top-level messages:
	Token
	Issue
*/
package githubcard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Issue_IssueState int32

const (
	Issue_OPEN   Issue_IssueState = 0
	Issue_CLOSED Issue_IssueState = 1
)

var Issue_IssueState_name = map[int32]string{
	0: "OPEN",
	1: "CLOSED",
}
var Issue_IssueState_value = map[string]int32{
	"OPEN":   0,
	"CLOSED": 1,
}

func (x Issue_IssueState) String() string {
	return proto.EnumName(Issue_IssueState_name, int32(x))
}
func (Issue_IssueState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Issue struct {
	Title   string           `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Body    string           `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Service string           `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	Number  int32            `protobuf:"varint,4,opt,name=number" json:"number,omitempty"`
	State   Issue_IssueState `protobuf:"varint,5,opt,name=state,enum=githubcard.Issue_IssueState" json:"state,omitempty"`
	Sticky  bool             `protobuf:"varint,6,opt,name=sticky" json:"sticky,omitempty"`
}

func (m *Issue) Reset()                    { *m = Issue{} }
func (m *Issue) String() string            { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()               {}
func (*Issue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Issue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Issue) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Issue) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Issue) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Issue) GetState() Issue_IssueState {
	if m != nil {
		return m.State
	}
	return Issue_OPEN
}

func (m *Issue) GetSticky() bool {
	if m != nil {
		return m.Sticky
	}
	return false
}

func init() {
	proto.RegisterType((*Token)(nil), "githubcard.Token")
	proto.RegisterType((*Issue)(nil), "githubcard.Issue")
	proto.RegisterEnum("githubcard.Issue_IssueState", Issue_IssueState_name, Issue_IssueState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Github service

type GithubClient interface {
	AddIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
	Get(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
}

type githubClient struct {
	cc *grpc.ClientConn
}

func NewGithubClient(cc *grpc.ClientConn) GithubClient {
	return &githubClient{cc}
}

func (c *githubClient) AddIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := grpc.Invoke(ctx, "/githubcard.Github/AddIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) Get(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := grpc.Invoke(ctx, "/githubcard.Github/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Github service

type GithubServer interface {
	AddIssue(context.Context, *Issue) (*Issue, error)
	Get(context.Context, *Issue) (*Issue, error)
}

func RegisterGithubServer(s *grpc.Server, srv GithubServer) {
	s.RegisterService(&_Github_serviceDesc, srv)
}

func _Github_AddIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).AddIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/AddIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).AddIssue(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).Get(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Github_serviceDesc = grpc.ServiceDesc{
	ServiceName: "githubcard.Github",
	HandlerType: (*GithubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIssue",
			Handler:    _Github_AddIssue_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Github_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "githubcard.proto",
}

func init() { proto.RegisterFile("githubcard.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x18, 0x85, 0x17, 0xd7, 0xc4, 0x7a, 0x2e, 0xa4, 0xfe, 0x88, 0x04, 0x51, 0x28, 0xb9, 0xea, 0x8d,
	0xbb, 0xa8, 0x4f, 0x20, 0x3a, 0x86, 0x20, 0x4e, 0x3a, 0x5f, 0x60, 0x6d, 0x83, 0x96, 0xea, 0x2a,
	0xcd, 0x5f, 0x61, 0xcf, 0xe9, 0x0b, 0x49, 0xd3, 0xe9, 0x84, 0xde, 0x78, 0x13, 0xfe, 0xef, 0x9c,
	0x43, 0x4e, 0xf2, 0x23, 0x7a, 0xa9, 0xf8, 0xb5, 0xcb, 0x8b, 0x75, 0x5b, 0xce, 0x3e, 0xda, 0x86,
	0x1b, 0xc2, 0x5e, 0x31, 0x97, 0x90, 0xcf, 0x4d, 0x6d, 0x37, 0x74, 0x0a, 0xc9, 0xfd, 0xa0, 0x45,
	0x2c, 0x92, 0xa3, 0x6c, 0x00, 0xf3, 0x25, 0x20, 0xef, 0x9d, 0xeb, 0xac, 0xf7, 0x2b, 0x7e, 0xb3,
	0xbf, 0x7e, 0x0f, 0x44, 0x08, 0xf2, 0xa6, 0xdc, 0xea, 0x03, 0x2f, 0xfa, 0x99, 0x34, 0x0e, 0x9d,
	0x6d, 0x3f, 0xab, 0xc2, 0xea, 0xa9, 0x97, 0x7f, 0x90, 0xce, 0xa0, 0x36, 0xdd, 0x7b, 0x6e, 0x5b,
	0x1d, 0xc4, 0x22, 0x91, 0xd9, 0x8e, 0x28, 0x85, 0x74, 0xbc, 0x66, 0xab, 0x65, 0x2c, 0x92, 0xe3,
	0xf4, 0x62, 0xf6, 0xe7, 0xc9, 0xbe, 0x7d, 0x38, 0x57, 0x7d, 0x26, 0x1b, 0xa2, 0xfd, 0x5d, 0x8e,
	0xab, 0xa2, 0xde, 0x6a, 0x15, 0x8b, 0x24, 0xcc, 0x76, 0x64, 0x0c, 0xb0, 0x0f, 0x53, 0x88, 0x60,
	0xf9, 0x34, 0x7f, 0x8c, 0x26, 0x04, 0xa8, 0xdb, 0x87, 0xe5, 0x6a, 0x7e, 0x17, 0x89, 0xb4, 0x86,
	0x5a, 0xf8, 0x06, 0x4a, 0x11, 0xde, 0x94, 0xe5, 0xf0, 0xc3, 0x93, 0x51, 0xed, 0xf9, 0x58, 0x32,
	0x13, 0xba, 0xc2, 0x74, 0x61, 0xf9, 0xbf, 0xf1, 0x5c, 0xf9, 0xa5, 0x5f, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x14, 0x84, 0xee, 0xc2, 0x88, 0x01, 0x00, 0x00,
}
