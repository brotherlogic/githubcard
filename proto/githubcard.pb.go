// Code generated by protoc-gen-go. DO NOT EDIT.
// source: githubcard.proto

package githubcard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Issue_IssueState int32

const (
	Issue_OPEN   Issue_IssueState = 0
	Issue_CLOSED Issue_IssueState = 1
)

var Issue_IssueState_name = map[int32]string{
	0: "OPEN",
	1: "CLOSED",
}
var Issue_IssueState_value = map[string]int32{
	"OPEN":   0,
	"CLOSED": 1,
}

func (x Issue_IssueState) String() string {
	return proto.EnumName(Issue_IssueState_name, int32(x))
}
func (Issue_IssueState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_githubcard_80558b1df39b95f8, []int{1, 0}
}

type Token struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_githubcard_80558b1df39b95f8, []int{0}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (dst *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(dst, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Issue struct {
	Title                string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string           `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Service              string           `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Number               int32            `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	State                Issue_IssueState `protobuf:"varint,5,opt,name=state,proto3,enum=githubcard.Issue_IssueState" json:"state,omitempty"`
	Sticky               bool             `protobuf:"varint,6,opt,name=sticky,proto3" json:"sticky,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_githubcard_80558b1df39b95f8, []int{1}
}
func (m *Issue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue.Unmarshal(m, b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
}
func (dst *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(dst, src)
}
func (m *Issue) XXX_Size() int {
	return xxx_messageInfo_Issue.Size(m)
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Issue) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Issue) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Issue) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Issue) GetState() Issue_IssueState {
	if m != nil {
		return m.State
	}
	return Issue_OPEN
}

func (m *Issue) GetSticky() bool {
	if m != nil {
		return m.Sticky
	}
	return false
}

type IssueList struct {
	Issues               []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueList) Reset()         { *m = IssueList{} }
func (m *IssueList) String() string { return proto.CompactTextString(m) }
func (*IssueList) ProtoMessage()    {}
func (*IssueList) Descriptor() ([]byte, []int) {
	return fileDescriptor_githubcard_80558b1df39b95f8, []int{2}
}
func (m *IssueList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueList.Unmarshal(m, b)
}
func (m *IssueList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueList.Marshal(b, m, deterministic)
}
func (dst *IssueList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueList.Merge(dst, src)
}
func (m *IssueList) XXX_Size() int {
	return xxx_messageInfo_IssueList.Size(m)
}
func (m *IssueList) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueList.DiscardUnknown(m)
}

var xxx_messageInfo_IssueList proto.InternalMessageInfo

func (m *IssueList) GetIssues() []*Issue {
	if m != nil {
		return m.Issues
	}
	return nil
}

func init() {
	proto.RegisterType((*Token)(nil), "githubcard.Token")
	proto.RegisterType((*Issue)(nil), "githubcard.Issue")
	proto.RegisterType((*IssueList)(nil), "githubcard.IssueList")
	proto.RegisterEnum("githubcard.Issue_IssueState", Issue_IssueState_name, Issue_IssueState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GithubClient is the client API for Github service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GithubClient interface {
	AddIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
	Get(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
}

type githubClient struct {
	cc *grpc.ClientConn
}

func NewGithubClient(cc *grpc.ClientConn) GithubClient {
	return &githubClient{cc}
}

func (c *githubClient) AddIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/githubcard.Github/AddIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubClient) Get(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/githubcard.Github/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubServer is the server API for Github service.
type GithubServer interface {
	AddIssue(context.Context, *Issue) (*Issue, error)
	Get(context.Context, *Issue) (*Issue, error)
}

func RegisterGithubServer(s *grpc.Server, srv GithubServer) {
	s.RegisterService(&_Github_serviceDesc, srv)
}

func _Github_AddIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).AddIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/AddIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).AddIssue(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Github_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubcard.Github/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServer).Get(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Github_serviceDesc = grpc.ServiceDesc{
	ServiceName: "githubcard.Github",
	HandlerType: (*GithubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIssue",
			Handler:    _Github_AddIssue_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Github_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "githubcard.proto",
}

func init() { proto.RegisterFile("githubcard.proto", fileDescriptor_githubcard_80558b1df39b95f8) }

var fileDescriptor_githubcard_80558b1df39b95f8 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xd1, 0x4a, 0xf3, 0x30,
	0x14, 0xc7, 0x97, 0xaf, 0x4d, 0xbe, 0xee, 0x08, 0x52, 0x0f, 0x22, 0x41, 0x14, 0x4a, 0xae, 0xea,
	0x85, 0xbb, 0x88, 0xe0, 0xbd, 0xe8, 0x18, 0xc2, 0x70, 0x92, 0xf9, 0x02, 0x6b, 0x1b, 0x34, 0x54,
	0x57, 0x69, 0x52, 0x61, 0xcf, 0xe9, 0x0b, 0x49, 0xd2, 0xea, 0x84, 0xde, 0x78, 0x13, 0xce, 0xef,
	0x7f, 0x7e, 0xc9, 0x09, 0x09, 0xa4, 0xcf, 0xc6, 0xbd, 0x74, 0x45, 0xb9, 0x69, 0xab, 0xd9, 0x7b,
	0xdb, 0xb8, 0x06, 0x61, 0x9f, 0x88, 0x73, 0xa0, 0x4f, 0x4d, 0xad, 0xb7, 0x78, 0x0c, 0xd4, 0xf9,
	0x82, 0x93, 0x8c, 0xe4, 0x53, 0xd5, 0x83, 0xf8, 0x24, 0x40, 0xef, 0xad, 0xed, 0x74, 0xe8, 0x1b,
	0xf7, 0xaa, 0x7f, 0xfa, 0x1e, 0x10, 0x21, 0x2e, 0x9a, 0x6a, 0xc7, 0xff, 0x85, 0x30, 0xd4, 0xc8,
	0xe1, 0xbf, 0xd5, 0xed, 0x87, 0x29, 0x35, 0x8f, 0x42, 0xfc, 0x8d, 0x78, 0x02, 0x6c, 0xdb, 0xbd,
	0x15, 0xba, 0xe5, 0x71, 0x46, 0x72, 0xaa, 0x06, 0x42, 0x09, 0xd4, 0xba, 0x8d, 0xd3, 0x9c, 0x66,
	0x24, 0x3f, 0x94, 0x67, 0xb3, 0x5f, 0x57, 0x0e, 0xd3, 0xfb, 0x75, 0xed, 0x1d, 0xd5, 0xab, 0xfe,
	0x2c, 0xeb, 0x4c, 0x59, 0xef, 0x38, 0xcb, 0x48, 0x9e, 0xa8, 0x81, 0x84, 0x00, 0xd8, 0xcb, 0x98,
	0x40, 0xbc, 0x7a, 0x9c, 0x3f, 0xa4, 0x13, 0x04, 0x60, 0xb7, 0xcb, 0xd5, 0x7a, 0x7e, 0x97, 0x12,
	0x71, 0x0d, 0xd3, 0xe0, 0x2c, 0x8d, 0x75, 0x78, 0x01, 0xcc, 0x78, 0xb0, 0x9c, 0x64, 0x51, 0x7e,
	0x20, 0x8f, 0x46, 0xd3, 0xd5, 0x20, 0xc8, 0x1a, 0xd8, 0x22, 0xf4, 0x50, 0x42, 0x72, 0x53, 0x55,
	0xfd, 0xcb, 0x8c, 0x37, 0x9c, 0x8e, 0x23, 0x31, 0xc1, 0x4b, 0x88, 0x16, 0xda, 0xfd, 0x55, 0x2f,
	0x58, 0xf8, 0xac, 0xab, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xbe, 0x33, 0x41, 0xc0, 0x01,
	0x00, 0x00,
}
